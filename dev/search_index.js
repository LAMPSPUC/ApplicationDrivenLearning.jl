var documenterSearchIndex = {"docs":
[{"location":"reference/#API","page":"API","title":"API","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"This section documents the ApplicationDrivenLearning API.","category":"page"},{"location":"reference/#Constructors","page":"API","title":"Constructors","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Model\nPredictiveModel\nPlan\nAssess","category":"page"},{"location":"reference/#ApplicationDrivenLearning.Model","page":"API","title":"ApplicationDrivenLearning.Model","text":"Model <: JuMP.AbstractModel\n\nCreate an empty ApplicationDrivenLearning.Model with empty plan and assess models, missing forecast model and default settings.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ApplicationDrivenLearning.PredictiveModel","page":"API","title":"ApplicationDrivenLearning.PredictiveModel","text":"PredictiveModel(networks, input_output_map, input_size, output_size)\n\nCreates a predictive (forecast) model for the AppDrivenLearning module from Flux models and input/output information.\n\n...\n\nArguments\n\nnetworks: array of Flux models to be used.\ninput_output_map::Vector{Dict{Vector{Int}, Vector{Int}}}: array in the same ordering as networks of mappings from input indexes to output indexes on which the models should be applied.\ninput_size::Int: size of the input vector.\noutput_size::Int: size of the output vector. ...\n\nExample\n\njulia> pred_model = PredictiveModel(\n        [Flux.Dense(1 => 1), Flux.Dense(3 => 2)],\n        [\n            Dict([1] => [1], [1] => [2]),\n            Dict([1,2,3] => [3,4], [1,4,5] => [5,6])\n        ],\n        5,\n        6\n    );\n\n\n\n\n\n","category":"type"},{"location":"reference/#ApplicationDrivenLearning.Plan","page":"API","title":"ApplicationDrivenLearning.Plan","text":"Upper(model::ApplicationDrivenLearning.Model)\n\nCreate a reference to the plan model of an application driven learning model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.Assess","page":"API","title":"ApplicationDrivenLearning.Assess","text":"Assess(model::ApplicationDrivenLearning.Model)\n\nCreate a reference to the assess model of an application driven learning model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#JuMP-variable-types","page":"API","title":"JuMP variable types","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Policy\nForecast","category":"page"},{"location":"reference/#ApplicationDrivenLearning.Policy","page":"API","title":"ApplicationDrivenLearning.Policy","text":"Policy{T}\n\nPolicy variable type that holds plan and assess variables.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ApplicationDrivenLearning.Forecast","page":"API","title":"ApplicationDrivenLearning.Forecast","text":"Forecast{T}\n\nForecast variable type that holds plan and assess variables.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Structs","page":"API","title":"Structs","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"ApplicationDrivenLearning.Options\nApplicationDrivenLearning.Solution","category":"page"},{"location":"reference/#ApplicationDrivenLearning.Options","page":"API","title":"ApplicationDrivenLearning.Options","text":"Options(mode; params...)\n\nOptions struct to hold optimization mode and mode parameters.\n\n...\n\nExample\n\noptions = Options(\n    GradientMode;\n    rule = Optim.RMSProp(0.01),\n    epochs = 100,\n    batch_size = 10,\n)\n\n...\n\n\n\n\n\n","category":"type"},{"location":"reference/#ApplicationDrivenLearning.Solution","page":"API","title":"ApplicationDrivenLearning.Solution","text":"Solution\n\nA struct to store the result of the optimisation process with final cost and solution.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Modes","page":"API","title":"Modes","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"ApplicationDrivenLearning.NelderMeadMode\nApplicationDrivenLearning.GradientMode\nApplicationDrivenLearning.NelderMeadMPIMode\nApplicationDrivenLearning.GradientMPIMode\nApplicationDrivenLearning.BilevelMode","category":"page"},{"location":"reference/#ApplicationDrivenLearning.NelderMeadMode","page":"API","title":"ApplicationDrivenLearning.NelderMeadMode","text":"NelderMeadMode <: AbstractOptimizationMode\n\nUsed to solve the application driven learning training problem using the Nelder-Mead optimization method implementation from Optim.jl package.\n\n...\n\nParameters\n\ninitial_simplex is the initial simplex of solutions to be applied.\nparameters is the parameters to be applied to the Nelder-Mead optimization method. ...\n\n\n\n\n\n","category":"type"},{"location":"reference/#ApplicationDrivenLearning.GradientMode","page":"API","title":"ApplicationDrivenLearning.GradientMode","text":"GradientMode <: AbstractOptimizationMode\n\nUsed to solve the application driven learning training problem using the gradient optimization method\n\n...\n\nParameters\n\nrule is the optimiser object to be used in the gradient optimization process.\n'epochs' is the number of epochs to be used in the gradient optimization process.\n'batch_size' is the batch size to be used in the gradient optimization process.\n'verbose' is the flag of whether to print the training process.\n'computecostevery' is the epoch frequency for computing the cost and evaluating best solution.\n'time_limit' is the time limit for the training process. ...\n\n\n\n\n\n","category":"type"},{"location":"reference/#ApplicationDrivenLearning.NelderMeadMPIMode","page":"API","title":"ApplicationDrivenLearning.NelderMeadMPIMode","text":"NelderMeadMPIMode <: AbstractOptimizationMode\n\nMPI implementation of NelderMeadMode.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ApplicationDrivenLearning.GradientMPIMode","page":"API","title":"ApplicationDrivenLearning.GradientMPIMode","text":"GradientMPIMode <: AbstractOptimizationMode\n\nMPI implementation of GradientMode.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ApplicationDrivenLearning.BilevelMode","page":"API","title":"ApplicationDrivenLearning.BilevelMode","text":"BilevelMode <: AbstractOptimizationMode\n\nUsed to solve the application driven learning training problem as a bilevel optimization problem by using the BilevelJuMP.jl package.\n\n...\n\nParameters\n\noptimizer::Function is equivalent to solver in BilevelJuMP.BilevelModel.\nsilent::Bool is equivalent to silent in BilevelJuMP.BilevelModel.\nmode::Union{Nothing, BilevelJuMP.BilevelMode} is equivalent to mode in BilevelJuMP.BilevelModel. ...\n\n\n\n\n\n","category":"type"},{"location":"reference/#Attributes-getters-and-setters","page":"API","title":"Attributes getters and setters","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"ApplicationDrivenLearning.plan_policy_vars\nApplicationDrivenLearning.assess_policy_vars\nApplicationDrivenLearning.plan_forecast_vars\nApplicationDrivenLearning.assess_forecast_vars\nApplicationDrivenLearning.set_forecast_model\nApplicationDrivenLearning.extract_params\nApplicationDrivenLearning.apply_params","category":"page"},{"location":"reference/#ApplicationDrivenLearning.plan_policy_vars","page":"API","title":"ApplicationDrivenLearning.plan_policy_vars","text":"Returns vector of policy variables from plan model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.assess_policy_vars","page":"API","title":"ApplicationDrivenLearning.assess_policy_vars","text":"Returns vector of policy variables from assess model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.plan_forecast_vars","page":"API","title":"ApplicationDrivenLearning.plan_forecast_vars","text":"Returns vector of forecast variables from plan model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.assess_forecast_vars","page":"API","title":"ApplicationDrivenLearning.assess_forecast_vars","text":"Returns vector of forecast variables from assess model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.set_forecast_model","page":"API","title":"ApplicationDrivenLearning.set_forecast_model","text":"Sets Chain, Dense or custom PredictiveModel object as forecast model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.extract_params","page":"API","title":"ApplicationDrivenLearning.extract_params","text":"extract_params(model)\n\nExtract the parameters of a PredictiveModel into a single vector.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.apply_params","page":"API","title":"ApplicationDrivenLearning.apply_params","text":"apply_params(model, θ)\n\nReturn model after fixing the parameters from an adequate vector of parameters.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Flux-attributes-getters-and-setters","page":"API","title":"Flux attributes getters and setters","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"ApplicationDrivenLearning.extract_flux_params\nApplicationDrivenLearning.fix_flux_params_single_model\nApplicationDrivenLearning.fix_flux_params_multi_model\nApplicationDrivenLearning.has_params\nApplicationDrivenLearning.apply_gradient!","category":"page"},{"location":"reference/#ApplicationDrivenLearning.extract_flux_params","page":"API","title":"ApplicationDrivenLearning.extract_flux_params","text":"extract_flux_params(model)\n\nExtract the parameters of a Flux model (Flux.Chain or Flux.Dense) into a single vector.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.fix_flux_params_single_model","page":"API","title":"ApplicationDrivenLearning.fix_flux_params_single_model","text":"fix_flux_params_single_model(model, θ)\n\nReturn model after fixing the parameters from an adequate vector of parameters.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.fix_flux_params_multi_model","page":"API","title":"ApplicationDrivenLearning.fix_flux_params_multi_model","text":"fix_flux_params_multi_model(models, θ)\n\nReturn iterable of models after fixing the parameters from an adequate vector of parameters.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.has_params","page":"API","title":"ApplicationDrivenLearning.has_params","text":"has_params(layer)\n\nCheck if a Flux layer has parameters.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.apply_gradient!","page":"API","title":"ApplicationDrivenLearning.apply_gradient!","text":"apply_gradient!(model, dCdy, X, rule)\n\nApply a gradient vector to the model parameters.\n\n...\n\nArguments\n\nmodel::PredictiveModel: model to be updated.\ndCdy::Vector{<:Real}: gradient vector.\nX::Matrix{<:Real}: input data.\nrule: Optimisation rule. ...\n\n\n\n\n\n","category":"function"},{"location":"reference/#Other-functions","page":"API","title":"Other functions","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"forecast\ncompute_cost\ntrain!\nApplicationDrivenLearning.build_plan_model_forecast_params\nApplicationDrivenLearning.build_assess_model_policy_constraint\nApplicationDrivenLearning.build","category":"page"},{"location":"reference/#ApplicationDrivenLearning.forecast","page":"API","title":"ApplicationDrivenLearning.forecast","text":"forecast(model, X)\n\nReturn forecast model output for given input.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.compute_cost","page":"API","title":"ApplicationDrivenLearning.compute_cost","text":"compute_cost(model, X, Y, with_gradients=false)\n\nCompute the cost function (C) based on the model predictions and the true values.\n\n...\n\nArguments\n\nmodel::ApplicationDrivenLearning.Model: model to evaluate.\nX::Matrix{<:Real}: input data.\nY::Matrix{<:Real}: true values.\nwith_gradients::Bool=false: flag to compute and return gradients. ...\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.train!","page":"API","title":"ApplicationDrivenLearning.train!","text":"train!(model, X, y, options)\n\nTrain model using given data and options.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.build_plan_model_forecast_params","page":"API","title":"ApplicationDrivenLearning.build_plan_model_forecast_params","text":"Creates new forecast variables to plan model using MOI.Parameter and new constraint fixing to original forecast variables.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.build_assess_model_policy_constraint","page":"API","title":"ApplicationDrivenLearning.build_assess_model_policy_constraint","text":"Creates new constraint to assess model that fixes policy variables.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ApplicationDrivenLearning.build","page":"API","title":"ApplicationDrivenLearning.build","text":"Calls functions that set new variables and constraints that are necessary to cost computation.\n\n\n\n\n\n","category":"function"},{"location":"#ApplicationDrivenLearning.jl-Documentation","page":"ApplicationDrivenLearning.jl Documentation","title":"ApplicationDrivenLearning.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"ApplicationDrivenLearning.jl Documentation","title":"Introduction","text":"","category":"section"},{"location":"","page":"ApplicationDrivenLearning.jl Documentation","title":"ApplicationDrivenLearning.jl Documentation","text":"ApplicationDrivenLearning.jl is a Julia package for training time series models using the application driven learning framework, that connects the optimization problem final cost with predictive model parameters in order to achieve the best model for a given application.","category":"page"},{"location":"#Usage","page":"ApplicationDrivenLearning.jl Documentation","title":"Usage","text":"","category":"section"},{"location":"","page":"ApplicationDrivenLearning.jl Documentation","title":"ApplicationDrivenLearning.jl Documentation","text":"import Pkg\n\nPkg.add(\"ApplicationDrivenLearning\")  # not working yet! clone the repo instead\n\nusing ApplicationDrivenLearning\n\n## Single power plan problem\n\n# data\nX = reshape([1 1], (2, 1))\nY = reshape([0 2], (2, 1))\n\n# main model and policy / forecast variables\nmodel = ApplicationDrivenLearning.Model()\n@variables(model, begin\n    z, ApplicationDrivenLearning.Policy\n    θ, ApplicationDrivenLearning.Forecast\nend)\n\n# plan model\n@variables(ApplicationDrivenLearning.Plan(model), begin\n    c1 ≥ 0\n    c2 ≥ 0\nend)\n@constraints(ApplicationDrivenLearning.Plan(model), begin\n    c1 ≥ 100 * (θ.plan-z.plan)\n    c2 ≥ 20 * (z.plan-θ.plan)\nend)\n@objective(ApplicationDrivenLearning.Plan(model), Min, 10*z.plan + c1 + c2)\n\n# assess model\n@variables(ApplicationDrivenLearning.Assess(model), begin\n    c1 ≥ 0\n    c2 ≥ 0\nend)\n@constraints(ApplicationDrivenLearning.Assess(model), begin\n    c1 ≥ 100 * (θ.assess-z.assess)\n    c2 ≥ 20 * (z.assess-θ.assess)\nend)\n@objective(ApplicationDrivenLearning.Assess(model), Min, 10*z.assess + c1 + c2)\n\n# basic setting\nset_optimizer(model, HiGHS.Optimizer)\nset_silent(model)\n\n# forecast model\nnn = Chain(Dense(1 => 1; bias=false))\nApplicationDrivenLearning.set_forecast_model(model, nn)\n\n# training and getting solution\nsolution = ApplicationDrivenLearning.train!(\n    model,\n    X,\n    Y,\n    ApplicationDrivenLearning.Options(\n        ApplicationDrivenLearning.NelderMeadMode\n    )\n)\nprint(solution.params)","category":"page"},{"location":"#Installation","page":"ApplicationDrivenLearning.jl Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"ApplicationDrivenLearning.jl Documentation","title":"ApplicationDrivenLearning.jl Documentation","text":"This package is not yet registered so if you want to use or test the code clone this repo and include source code from src directory.","category":"page"},{"location":"#Contributing","page":"ApplicationDrivenLearning.jl Documentation","title":"Contributing","text":"","category":"section"},{"location":"","page":"ApplicationDrivenLearning.jl Documentation","title":"ApplicationDrivenLearning.jl Documentation","text":"PRs such as adding new models and fixing bugs are very welcome!\nFor nontrivial changes, you'll probably want to first discuss the changes via issue.","category":"page"}]
}
